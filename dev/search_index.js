var documenterSearchIndex = {"docs":
[{"location":"reference/#API-References","page":"References","title":"API References","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]\nDepth = 3","category":"page"},{"location":"reference/#Basic-Interfaces","page":"References","title":"Basic Interfaces","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Basic construct:","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Construct\nserialize\ndeserialize\nestimatesize","category":"page"},{"location":"reference/#Constructs.Construct","page":"References","title":"Constructs.Construct","text":"Construct{T}\n\nConstruct is used for serializing and deserializing objects.\n\nMethods\n\ndeserialize(cons::Construct{T}, s::IO; contextkw...)::T\nserialize(cons::Construct{T}, s::IO, obj::T; contextkw...)\nestimatesize(cons::Construct{T}; contextkw...) - optional\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.serialize","page":"References","title":"Constructs.serialize","text":"serialize(cons::Construct, s::IO, obj; contextkw...)\nserialize(T, s::IO, obj; contextkw...)\nserialize(s::IO, obj; contextkw...)\n\nSerialize an object into a stream.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Constructs.deserialize","page":"References","title":"Constructs.deserialize","text":"deserialize(cons::Construct, s::IO; contextkw...)\ndeserialize(T, s::IO; contextkw...)\n\nDeserialize a stream to an object.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Constructs.estimatesize","page":"References","title":"Constructs.estimatesize","text":"estimatesize(cons::Construct; contextkw...)\nestimatesize(T; contextkw...)\n\nEstimate the size of the type.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"References","title":"References","text":"Construct wrapper:","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Wrapper\nsubcon","category":"page"},{"location":"reference/#Constructs.Wrapper","page":"References","title":"Constructs.Wrapper","text":"Wrapper{TSub, T} <: Construct{T}\n\nBase type of wrapper of TSub.\n\nMethods\n\nsubcon(wrapper::Wrapper{TSub, T})::Construct{TSub}\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.subcon","page":"References","title":"Constructs.subcon","text":"subcon(wrapper::Wrapper{TSub, T})::Construct{TSub}\n\nGet sub-construct of wrapper.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"References","title":"References","text":"Construct adapter:","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Adapter\nSymmetricAdapter\nencode\ndecode","category":"page"},{"location":"reference/#Constructs.Adapter","page":"References","title":"Constructs.Adapter","text":"Adapter{TSub, T} <: Wrapper{TSub, T}\n\nAbstract adapter type.\n\nMethods\n\nsubcon(adapter::Adapter{TSub, T})::Construct{TSub}\nencode(adapter::Adapter{TSub, T}, obj::T; contextkw...)\ndecode(adapter::Adapter{TSub, T}, obj::TSub; contextkw...)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.SymmetricAdapter","page":"References","title":"Constructs.SymmetricAdapter","text":"SymmetricAdapter{T} <: Adapter{T, T}\n\nAbstract adapter type. encode both for serializing and deserializing.\n\nMethods\n\nsubcon(adapter::SymmetricAdapter{T})::Construct{T}\nencode(adapter::SymmetricAdapter{T}, obj::T; contextkw...)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.encode","page":"References","title":"Constructs.encode","text":"encode(adapter::Adapter{TSub, T}, obj::T; contextkw...) where {TSub, T}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Constructs.decode","page":"References","title":"Constructs.decode","text":"decode(adapter::Adapter{TSub, T}, obj::TSub; contextkw...) where {TSub, T}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"References","title":"References","text":"Construct validator:","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Validator\nvalidate\nValidationError","category":"page"},{"location":"reference/#Constructs.Validator","page":"References","title":"Constructs.Validator","text":"Validator{T} <: SymmetricAdapter{T}\n\nAbstract validator type. Validates a condition on the encoded/decoded object..\n\nMethods\n\nsubcon(validator::Validator{T})::Construct{T}\nvalidate(validator::Validator{T}, obj::T; contextkw...)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.validate","page":"References","title":"Constructs.validate","text":"validate(validator::Validator{T}, obj::T; contextkw...)\n\nChecks whether the given obj is a valid value for the validator.\n\nShould return a Bool or throw a ValidationError.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Constructs.ValidationError","page":"References","title":"Constructs.ValidationError","text":"ValidationError(msg)\n\nError thrown when the validatiion failed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Primitive-Constructs","page":"References","title":"Primitive Constructs","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"PrimitiveIO\nSingleton\nJuliaSerializer\nRaiseError","category":"page"},{"location":"reference/#Constructs.PrimitiveIO","page":"References","title":"Constructs.PrimitiveIO","text":"PrimitiveIO{T} <: Construct{T}\n\nConstruct based on primitive read/write.\n\nThis is the default construct for Bool, Char, UInt8, UInt16, UInt32, UInt64, UInt128, Int8, Int16, Int32, Int64, Int128, Float16, Float32 and Float64.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.Singleton","page":"References","title":"Constructs.Singleton","text":"Singleton{T} <: Construct{T}\n\nSingleton type empty construct.\n\nThis is the default constructor for Nothing and Missing.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.JuliaSerializer","page":"References","title":"Constructs.JuliaSerializer","text":"JuliaSerializer <: Construct{Any}\n\nStandard Julia serialization.\n\nSee also: Serialization\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.RaiseError","page":"References","title":"Constructs.RaiseError","text":"RaiseError{E<:Exception} <: Construct{Union{}}\n\nHelper to raise an user-defined error.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Endianness-Adapters","page":"References","title":"Endianness Adapters","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"LittleEndian\nBigEndian","category":"page"},{"location":"reference/#Constructs.LittleEndian","page":"References","title":"Constructs.LittleEndian","text":"LittleEndian{T, TSubCon<:Construct{T}} <: Adapter{T, T}\n\nLittle endian data adapter for serializing and deserializing.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.BigEndian","page":"References","title":"Constructs.BigEndian","text":"BigEndian{T, TSubCon<:Construct{T}} <: Adapter{T, T}\n\nBig endian data adapter for serializing and deserializing.\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"References","title":"References","text":"Modules = [Constructs]\nFilter = c -> c isa LittleEndian || c isa BigEndian","category":"page"},{"location":"reference/#Constructs.Float16be","page":"References","title":"Constructs.Float16be","text":"Float16be = BigEndian(Float16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Float16le","page":"References","title":"Constructs.Float16le","text":"Float16le = LittleEndian(Float16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Float32be","page":"References","title":"Constructs.Float32be","text":"Float32be = BigEndian(Float32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Float32le","page":"References","title":"Constructs.Float32le","text":"Float32le = LittleEndian(Float32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Float64be","page":"References","title":"Constructs.Float64be","text":"Float64be = BigEndian(Float64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Float64le","page":"References","title":"Constructs.Float64le","text":"Float64le = LittleEndian(Float64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int128be","page":"References","title":"Constructs.Int128be","text":"Int128be = BigEndian(Int128)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int128le","page":"References","title":"Constructs.Int128le","text":"Int128le = LittleEndian(Int128)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int16be","page":"References","title":"Constructs.Int16be","text":"Int16be = BigEndian(Int16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int16le","page":"References","title":"Constructs.Int16le","text":"Int16le = LittleEndian(Int16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int32be","page":"References","title":"Constructs.Int32be","text":"Int32be = BigEndian(Int32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int32le","page":"References","title":"Constructs.Int32le","text":"Int32le = LittleEndian(Int32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int64be","page":"References","title":"Constructs.Int64be","text":"Int64be = BigEndian(Int64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Int64le","page":"References","title":"Constructs.Int64le","text":"Int64le = LittleEndian(Int64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt128be","page":"References","title":"Constructs.UInt128be","text":"UInt128be = BigEndian(UInt128)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt128le","page":"References","title":"Constructs.UInt128le","text":"UInt128le = LittleEndian(UInt128)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt16be","page":"References","title":"Constructs.UInt16be","text":"UInt16be = BigEndian(UInt16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt16le","page":"References","title":"Constructs.UInt16le","text":"UInt16le = LittleEndian(UInt16)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt32be","page":"References","title":"Constructs.UInt32be","text":"UInt32be = BigEndian(UInt32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt32le","page":"References","title":"Constructs.UInt32le","text":"UInt32le = LittleEndian(UInt32)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt64be","page":"References","title":"Constructs.UInt64be","text":"UInt64be = BigEndian(UInt64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.UInt64le","page":"References","title":"Constructs.UInt64le","text":"UInt64le = LittleEndian(UInt64)\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Enums","page":"References","title":"Enums","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"IntEnum\nEnumNonExhaustive\nEnumExhaustive","category":"page"},{"location":"reference/#Constructs.IntEnum","page":"References","title":"Constructs.IntEnum","text":"IntEnum{Ex<:EnumExhaustibility, T, TSubCon<:Construct{T}, E<:Base.Enum} <: Adapter{T, E}\n\nInteger-based enum adapter for serializing and deserializing.\n\nThis is the default constructor for Base.Enum{T}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.EnumNonExhaustive","page":"References","title":"Constructs.EnumNonExhaustive","text":"EnumNonExhaustive <: EnumExhaustibility\n\nIndicates the enumeration is non-exhaustive.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.EnumExhaustive","page":"References","title":"Constructs.EnumExhaustive","text":"EnumExhaustive <: EnumExhaustibility\n\nIndicates the enumeration is exhaustive.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Sequence","page":"References","title":"Sequence","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Sequence","category":"page"},{"location":"reference/#Constructs.Sequence","page":"References","title":"Constructs.Sequence","text":"Sequence{Tuple{Ts...}} <: Construct{Tuple{Ts...}}\n\nA sequence of construct data.\n\nThis is the default constructor for Tuple{Ts...}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Repeaters","page":"References","title":"Repeaters","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"SizedArray\nGreedyVector","category":"page"},{"location":"reference/#Constructs.SizedArray","page":"References","title":"Constructs.SizedArray","text":"SizedArray{T, N, TA<:AbstractArray{T,N}, TSubCon<:Construct{T}} <: Repeater{T, TA}\n\nHomogenous array of elements.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.GreedyVector","page":"References","title":"Constructs.GreedyVector","text":"GreedyVector{T, TSubCon<:Construct{T}} <: Repeater{T, Vector{T}}\n\nHomogenous array of elements for unknown count of elements by deserializing until end of stream.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Conditional","page":"References","title":"Conditional","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Try","category":"page"},{"location":"reference/#Constructs.Try","page":"References","title":"Constructs.Try","text":"Try{TU} <: Construct{TU}\n\nAttempts to serialize/deserialize each of the subconstructs.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Padded","page":"References","title":"Padded","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Padded","category":"page"},{"location":"reference/#Constructs.Padded","page":"References","title":"Constructs.Padded","text":"Padded{T, TSubCon<:Construct{T}} <: Wrapper{T, T}\n\nRepresents Padded data.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Validators","page":"References","title":"Validators","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Const","category":"page"},{"location":"reference/#Constructs.Const","page":"References","title":"Constructs.Const","text":"Const{T, TSubCon<:Construct{T}} <: Validator{T}\n\nField enforcing a constant.\n\n\n\n\n\n","category":"type"},{"location":"reference/#@construct-Macro","page":"References","title":"@construct Macro","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"@construct\nthis\nContainer\nUndefProperty","category":"page"},{"location":"reference/#Constructs.@construct","page":"References","title":"Constructs.@construct","text":"@construct [ConstructName] structdefinition\n\nGenerate a Construct subtype with ConstructName for the given struct.\n\nExamples\n\njulia> @construct struct Bitmap\n           ::Const(b\"BMP\")\n           width::UInt16le\n           height::UInt16le\n           pixel::SizedArray(UInt8, this.width, this.height)\n       end\n\njulia> deserialize(Bitmap, b\"BMP\\x03\\x00\\x02\\x00\\x01\\x02\\x03\\x04\\x05\\x06\")\nBitmap(0x0003, 0x0002, UInt8[0x01 0x04; 0x02 0x05; 0x03 0x06])\n\njulia> serialize(Bitmap(2, 3, UInt8[1 2 3; 7 8 9]))\n13-element Vector{UInt8}:\n 0x42\n 0x4d\n 0x50\n 0x02\n 0x00\n 0x03\n 0x00\n 0x01\n 0x07\n 0x02\n 0x08\n 0x03\n 0x09\n\njulia> estimatesize(Bitmap)\nUnboundedSize(0x0000000000000007)\n\n\n\n\n\n","category":"macro"},{"location":"reference/#Constructs.this","page":"References","title":"Constructs.this","text":"this\n\nPlaceholder to access properties of the current object in @construct context.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Constructs.Container","page":"References","title":"Constructs.Container","text":"Container{T}\n\nIntermediate container for a struct object when serializing/deserializing it.\n\nContainer{T}()\n\nCreate an uninitialized container for T.\n\nExamples\n\njulia> Container{Complex{Int64}}()\nContainer{Complex{Int64}}:\n  re: #undef\n  im: #undef\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.UndefProperty","page":"References","title":"Constructs.UndefProperty","text":"UndefProperty\n\nPlaceholder for undefined properties in Container.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Construct-Sizes","page":"References","title":"Construct Sizes","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"ConstructSize\nExactSize\nRangedSize\nUnboundedSize\nUnboundedUpper","category":"page"},{"location":"reference/#Constructs.ConstructSize","page":"References","title":"Constructs.ConstructSize","text":"ConstructSize\n\nAbstract super type of construct size.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.ExactSize","page":"References","title":"Constructs.ExactSize","text":"ExactSize(value)\n\nExact construct size (upper bound and lower bound are same).\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.RangedSize","page":"References","title":"Constructs.RangedSize","text":"RangedSize(lower, upper)\n\nRanged construct size.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.UnboundedSize","page":"References","title":"Constructs.UnboundedSize","text":"UnboundedSize(lower)\n\nUnbounded ranged size.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.UnboundedUpper","page":"References","title":"Constructs.UnboundedUpper","text":"UnboundedUpper\n\nUnsigned infinity.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Errors","page":"References","title":"Errors","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"ConstructError\nExceedMaxIterations\nPaddedError","category":"page"},{"location":"reference/#Constructs.ExceedMaxIterations","page":"References","title":"Constructs.ExceedMaxIterations","text":"ExceedMaxIterations(msg, [max_iter])\n\nError thrown when exceed the max iterations.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Constructs.PaddedError","page":"References","title":"Constructs.PaddedError","text":"PaddedError(msg)\n\nError thrown when the encoded string or bytes takes more bytes than padding allows, or the pad value is improper.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Constructs","category":"page"},{"location":"#Constructs","page":"Home","title":"Constructs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A declarative deserialization-serialization for binary data. Inspired by Construct.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Constructs can be installed with the Julia package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Constructs\")","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@construct defines the struct type and the corresponding deserialize/serialize methods. The following Bitmap has a BMP header, width and height in UInt16 little-endian format, and pixel which is a 2-dimensional byte array with the specified width and height.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Constructs\n@construct struct Bitmap\n    ::Const(b\"BMP\")\n    width::UInt16le\n    height::UInt16le\n    pixel::SizedArray(UInt8, this.width, this.height)\nend\ndeserialize(Bitmap, b\"BMP\\x03\\x00\\x02\\x00\\x01\\x02\\x03\\x04\\x05\\x06\")\nserialize(Bitmap(2, 3, UInt8[1 2 3; 7 8 9]))","category":"page"}]
}
